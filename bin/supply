#!/usr/bin/env ruby

require 'erb'
require 'fileutils'
require_relative('../scripts/generate-secrets-profile-d-entry.rb')

$stdout.sync = true

$index = ARGV[3]
$build_dir = ARGV[0]
$cache_dir = ARGV[1]
$deps_dir = File.join(ARGV[2], $index)
$buildpack_dir = File.expand_path __dir__+"/../"

def install_vault_binary()
  vault_version_file = bp_path("vault_version")
  vault_version = IO.read(vault_version_file).chomp()

  vault_zip_url = "https://releases.hashicorp.com/vault/#{vault_version}/vault_#{vault_version}_linux_amd64.zip"
  zip_path = File.join($cache_dir, "vault.zip")

  puts "Downloading Hashicorp Vault #{vault_version}"
  `wget -q -O "#{zip_path}" "#{vault_zip_url}" &&
  unzip -qq "#{zip_path}" -d "#{$deps_dir}"`
end

def install_scripts()
  puts "Generating startup script"
  startup_template_path = bp_path("script-templates/vault-agent-startup.sh.erb")
  startup_renderer = ERB.new(IO.read(startup_template_path))
  IO.write(deps_path("vault-agent-startup.sh"), startup_renderer.result())
  FileUtils.chmod("+x", deps_path("vault-agent-startup.sh"))

  # Agent config must be generated when the app
  # starts in order to know which secrets API to use.
  FileUtils.copy(
    bp_path("scripts/generate-agent-config.rb"),
    deps_path("generate-agent-config.rb")
  )

  # We generate a profile.d entry which
  # only shows calls to Vault. This way,
  # the secrets aren't in plaintext anywhere.
  puts "Generating env var generation script"
  profile_d_content = generate_secrets_profile_d_entry(
    app_path("app-secrets.yml"),
    $index
  )

  Dir.mkdir(deps_path("profile.d/"))
  IO.write(deps_path("profile.d/secrets.sh"), profile_d_content)
  FileUtils.chmod("+x", deps_path("profile.d/secrets.sh"))
end

def create_sidecar_config
  launch_yml = %Q{
---
processes:
  - type: vault-agent
    command: "/home/vcap/deps/#{$index}/vault-agent-startup.sh"
    platforms:
      cloudfoundry:
        sidecar_for: ["web"]
}

  IO.write(File.join($deps_dir, "launch.yml"), launch_yml)
end

def bp_path(relative_path)
  File.expand_path(File.join($buildpack_dir, relative_path))
end

def deps_path(relative_path)
  File.expand_path(File.join($deps_dir, relative_path))
end

def app_path(relative_path)
  File.expand_path(File.join($build_dir, relative_path))
end

install_vault_binary()
install_scripts()
create_sidecar_config()
